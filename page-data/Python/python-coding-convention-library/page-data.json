{"componentChunkName":"component---src-templates-blog-post-js","path":"/Python/python-coding-convention-library/","result":{"data":{"site":{"siteMetadata":{"title":"Gunu's AI Log","author":"[Gunu]","siteUrl":"https://gunu441.github.io","comment":{"disqusShortName":"","utterances":"gunu9441/gunu9441.github.io"},"sponsor":{"buyMeACoffeeId":"gunu9441"}}},"markdownRemark":{"id":"57cb51c8-7836-56aa-b81a-42c4dbc77ad1","excerpt":"이번 시간에는 python의 coding convention을 맞춰주는 3가지 library에 대해서 알아보도록 하겠습니다!😊 오픈 소스 환경에서, 협업을 하다보면 coding convention이 중요합니다. 다수의 개발자가 모여 협업을 하기 때문에 서로가 코드를 수정하더라도 일관성 있는 코드를 생산해 내는 것이 매우 중요합니다. 이에 각 언어 별로 이런 coding convention을 위한 도구가 존재합니다. 그럼 파이썬에서 coding convention을 위한 tool…","html":"<p>    이번 시간에는 <strong>python의 coding convention</strong>을 <strong>맞춰주는 3가지 library</strong>에 대해서 알아보도록 하겠습니다!😊 오픈 소스 환경에서, 협업을 하다보면 <strong>coding convention이 중요</strong>합니다. 다수의 개발자가 모여 협업을 하기 때문에 서로가 코드를 수정하더라도 <strong>일관성 있는 코드를 생산</strong>해 내는 것이 매우 중요합니다. 이에 각 언어 별로 이런 coding convention을 위한 도구가 존재합니다. 그럼 파이썬에서 coding convention을 위한 tool을 알아보도록 하겠습니다. 아래는 이번 포스트의 Category입니다.</p>\n<h2 id=\"category\" style=\"position:relative;\"><a href=\"#category\" aria-label=\"category permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Category</h2>\n<ol>\n<li>What is Lint?</li>\n<li>black</li>\n<li>flake8</li>\n<li>The Attributes of flake8 and Usage</li>\n<li>isort</li>\n<li>Git Hook</li>\n<li>Conclusion</li>\n<li>Summary</li>\n<li>Reference</li>\n</ol>\n<h2 id=\"what-is-lint\" style=\"position:relative;\"><a href=\"#what-is-lint\" aria-label=\"what is lint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Lint?</h2>\n<p>    <strong>lint</strong>란 무엇일까요? <strong>lint</strong>란 <strong>소스코드를 분석</strong>해서 <strong>스타일 오류, 버그, 프로그램 오류 등등 오류가 의심되는 부분에 표시</strong>(flag)를 하기 위해 사용하는 도구를 가리킵니다. 즉, <strong>오류 등이 발생하지 않도록 검사해주는 역할</strong>을 하게 됩니다. Python도 lint가 존재하는데 바로 <strong>flake 8</strong>이라는 Tool입니다.</p>\n<h2 id=\"black\" style=\"position:relative;\"><a href=\"#black\" aria-label=\"black permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>black</h2>\n<p>    <strong>black</strong>은 파이썬 커뮤니티에서 최근 가장 널리쓰고 있는 코드 포멧터라고 합니다. black은 <strong>설정을 할 수 있는 것이 별로 없어서 특정 포멧팅 규칙을 그대로 따르게</strong> 되어 있습니다. 모든 사람들이 똑같은 규칙을 따른다면 그게 무슨 규칙이든 하나의 코드 스타일을 기준으로 일관성 있는 코드를 작성할 수 있겠죠??😉</p>\n<p>    black을 설치하는 방법은 아래의 command와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> black</code></pre></div>\n<p>    우리는 black을 이후에 <strong>Git Hook인 pre-commit Hook에 등록하여 사용</strong>할 것입니다. 이 방법은 아래에서 알아보도록 하겠습니다.</p>\n<h2 id=\"flake8\" style=\"position:relative;\"><a href=\"#flake8\" aria-label=\"flake8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>flake8</h2>\n<p>    flake8은 <code class=\"language-text\">PEP8</code>을 기반으로 <strong>coding convention을 검사</strong>합니다. flake8을 설치하는 방법은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> flake8</code></pre></div>\n<p>    <code class=\"language-text\">pip</code>를 통해 flake8을 설치 할 수 있고 flake8을 사용하는 방법은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ flake8 <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>file_name<span class=\"token operator\">|</span>dir_name<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"the-attributes-of-flake8-and-usage\" style=\"position:relative;\"><a href=\"#the-attributes-of-flake8-and-usage\" aria-label=\"the attributes of flake8 and usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Attributes of flake8 and Usage</h2>\n<p>    flake8에는 <strong>black과는 달리 다양한 attribute들이 존재</strong>합니다. 이 속성들을 <strong>CLI를 통해 입력</strong>할 수 있습니다. 하지만 <strong>프로젝트 별로 사용</strong>하기 위해 <strong>프로젝트의 상위 디렉토리</strong>에 <code class=\"language-text\">setup.cfg</code> 와 <strong>같은 파일을 활용</strong>하면 됩니다. 기본적으로 <code class=\"language-text\">setup.cfg</code>에서 사용할 때는 다음과 같이 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>flake8<span class=\"token punctuation\">]</span>\n\nignore <span class=\"token operator\">=</span> E501<span class=\"token punctuation\">,</span> E402<span class=\"token punctuation\">,</span> E261\n\nexclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>git<span class=\"token punctuation\">,</span> __pycache__\n\ncount <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>    위에 존재하는 <code class=\"language-text\">ignore</code>, <code class=\"language-text\">exclude</code>, <code class=\"language-text\">count</code>를 CLI로도 입력할 수 있지만 <strong>프로젝트 당 설정</strong>하기 위해선 <code class=\"language-text\">setup.cfg</code>를 설정하여 사용하는 것이 편리합니다. 이렇게 <code class=\"language-text\">setup.cfg</code>를 통해 <strong>attribute를 설정</strong>해주면 <code class=\"language-text\">flake8 file_name</code>을 <strong>해당 프로젝트 경로 어디에서 사용했는지와 상관 없이 적용</strong>됩니다. 이젠 자주 쓰게 될 attribute에 대해 알아보도록 하겠습니다.</p>\n<p>    이제 예시코드를 살펴보면서 진행하겠습니다. <code class=\"language-text\">practice1.py</code>는 아래와 같이 구성되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># pratice1.py</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> numpy\n\nhello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">+</span>\n    <span class=\"token number\">2</span> <span class=\"token operator\">+</span>\n    <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>① ignore</strong></p>\n<p>    <strong>무시할 error code를 명시</strong>할 때 사용합니다. 무시할 error code를 적을 땐, comma 단위로 분리하며 기본적으로 무시하는 에러가 존재합니다. <code class=\"language-text\">E121,E123,E126,E226,E24,E704,W503,W504</code>를 기본적으로 무시하게 됩니다. 하지만 명시적으로 <code class=\"language-text\">ignore</code>에 <code class=\"language-text\">ignore = E501, E402, E261</code>과 같이 명시하게 되면 기본적으로 무시하게 되는 에러 코드(<code class=\"language-text\">E121</code>~ <code class=\"language-text\">W504</code>)는 overriding되어 없어지게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#setup.cfg</span>\n\n<span class=\"token punctuation\">[</span>flake8<span class=\"token punctuation\">]</span>\n\nexclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>git<span class=\"token punctuation\">,</span> __pycache__\n\ncount <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token comment\">#CLI</span>\n\n$ flake8 practice1<span class=\"token punctuation\">.</span>py\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> E305 expected <span class=\"token number\">2</span> blank lines after <span class=\"token keyword\">class</span> <span class=\"token class-name\">or</span> function definition<span class=\"token punctuation\">,</span> found <span class=\"token number\">1</span>\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> E402 module level <span class=\"token keyword\">import</span> <span class=\"token keyword\">not</span> at top of <span class=\"token builtin\">file</span>\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'os'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> E402 module level <span class=\"token keyword\">import</span> <span class=\"token keyword\">not</span> at top of <span class=\"token builtin\">file</span>\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'torch'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> E402 module level <span class=\"token keyword\">import</span> <span class=\"token keyword\">not</span> at top of <span class=\"token builtin\">file</span>\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'numpy'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span> W291 trailing whitespace\n<span class=\"token number\">8</span></code></pre></div>\n<p>    위의 코드와 명령 프롬프트를 보게되면 default ignore component들을 제외한 나머지 error들이 뜨는 것을 확인할 수 있습니다. 이제 ignore attribute를 사용하게 되면 어떻게 결과가 바뀌는지 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># setup.cfg</span>\n<span class=\"token punctuation\">[</span>flake8<span class=\"token punctuation\">]</span>\n\nignore <span class=\"token operator\">=</span> E501<span class=\"token punctuation\">,</span> E402<span class=\"token punctuation\">,</span> E261\n\nexclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>git<span class=\"token punctuation\">,</span> __pycache__\n\ncount <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token comment\"># CLI</span>\n$ flake8 practice1<span class=\"token punctuation\">.</span>py\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> E305 expected <span class=\"token number\">2</span> blank lines after <span class=\"token keyword\">class</span> <span class=\"token class-name\">or</span> function definition<span class=\"token punctuation\">,</span> found <span class=\"token number\">1</span>\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'os'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'torch'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'numpy'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span> W504 line <span class=\"token keyword\">break</span> after binary operator\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span> W504 line <span class=\"token keyword\">break</span> after binary operator\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span> W291 trailing whitespace\n<span class=\"token number\">7</span></code></pre></div>\n<p>    <strong>ignore를 사용하지 않았을 때와 위의 결과를 비교</strong>해보면 <code class=\"language-text\">E402</code>는 없어진 것을 확인할 수 있지만 <code class=\"language-text\">W504</code>는 생긴걸 확인해볼 수 있습니다. 이는 <code class=\"language-text\">setup.cfg</code>에서 <strong>ignore attribute를 명시적으로 사용</strong>해주어 <code class=\"language-text\">W504</code>가 <strong>overiding되었기 때문에 무시</strong>된 것입니다.</p>\n<p>    이에 기존의 <strong>default ignore component들을 유지한채로 추가시키고 싶다</strong>면 아래의 예제처럼 <code class=\"language-text\">extend-ignore</code>을 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># setup.cfg</span>\n<span class=\"token punctuation\">[</span>flake8<span class=\"token punctuation\">]</span>\n\nextend<span class=\"token operator\">-</span>ignore <span class=\"token operator\">=</span> E501<span class=\"token punctuation\">,</span> E402<span class=\"token punctuation\">,</span> E261\n\nexclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>git<span class=\"token punctuation\">,</span> __pycache__\n\ncount <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token comment\"># CLI</span>\n$ flake8 practice1<span class=\"token punctuation\">.</span>py\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> E305 expected <span class=\"token number\">2</span> blank lines after <span class=\"token keyword\">class</span> <span class=\"token class-name\">or</span> function definition<span class=\"token punctuation\">,</span> found <span class=\"token number\">1</span>\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'os'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'torch'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> F401 <span class=\"token string\">'numpy'</span> imported but unused\npractice1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span> W291 trailing whitespace\n<span class=\"token number\">5</span></code></pre></div>\n<p>    위의 그림을 보게되면 <code class=\"language-text\">extend-ignore</code>을 사용하여 default ignore component였던 <code class=\"language-text\">W504</code>가 <strong>ignore된 채로 다른 error도 ignore된 것을 확인</strong>할 수 있습니다.</p>\n<h2 id=\"isort\" style=\"position:relative;\"><a href=\"#isort\" aria-label=\"isort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>isort</h2>\n<p>    isort란 import한 라이브러리들을 <strong>알파벳 순서대로 정렬</strong>하거나 <strong>종류에 따라서 분류</strong>하는 라이브러리 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">pip install isort</code></pre></div>\n<p>isort를 설치하기 위해선 위와 같은 command를 입력하면 됩니다. Git Hook에 적용하는 방법은 아래에서 알아보도록 하겠습니다.</p>\n<h2 id=\"git-hook\" style=\"position:relative;\"><a href=\"#git-hook\" aria-label=\"git hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git Hook</h2>\n<p>    Git의 Hook 기능을 사용하게 되면 위에서 배운 <code class=\"language-text\">black</code>, <code class=\"language-text\">flake8</code>, <code class=\"language-text\">isort</code>를 더 편하게 사용할 수 있습니다. 그렇다면 Git의 Hook은 무엇을 말하는 걸까요?</p>\n<p>Git Hook은 <strong>어떤 이벤트(상황)에 특정 스크립트를 실행하는 기능</strong>입니다. Git은 여러가지 특정 이벤트(상황)에서 특정 스크립트를 실행할 수 있는데 10개의 hook중 하나가 <strong>바로 commit전에 특정 스크립트를 수행하는 pre-commit hook</strong>입니다.</p>\n<p>이 Git의 pre-commit hook을 편리하게 사용할 수 있도록 도와주는 <code class=\"language-text\">pre-commit</code>이라는 도구에 대해서 알아보도록 하겠습니다.</p>\n<p>① pre-commit 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> pre-commit</code></pre></div>\n<p>    위의 command를 통해 pre-commit tool을 설치해줍니다.</p>\n<p>② <code class=\"language-text\">.pre-commit-config.yaml</code> 생성</p>\n<p>    pre-commit은 <code class=\"language-text\">.pre-commit-config.yaml</code> 설정 파일을 필요로합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pre-commit sample-config <span class=\"token operator\">></span> .pre-commit-config.yaml</code></pre></div>\n<p>    위의 command를 사용하면 pre-commit에서 제공하는 기본 작업이 적혀있는 채로 파일이 작성됩니다.</p>\n<p>③ 설정한 설정 파일을 .git/hooks/pre-commit에 반영</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pre-commmit <span class=\"token function\">install</span></code></pre></div>\n<p>    위의 command를 사용하게 되면<code class=\"language-text\">.pre-commit-config.yaml</code>에 저장되어 있는 특정 작업들을 <strong>.git/hooks/pre-commit을 생성한 후 저장</strong>합니다. 이에 <code class=\"language-text\">commit</code>할 때마다 특정 작업들을 자동으로 실행합니다.</p>\n<p>④ 초기 셋업 단계에서 직접 <code class=\"language-text\">pre-commit</code>을 실행하여 설정이 잘 되어 있는지 확인(optional)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pre-commit run</code></pre></div>\n<p>    <code class=\"language-text\">.pre-commit-config.yaml</code>에 저장되어 있는대로 실행이 잘 되는지 확인해 볼 필요가 있기 때문에 위와 같은 command를 사용합니다.</p>\n<p>⑤ 새로운 hook을 추가했을 때, 기존의 파일 검사(optional)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pre-commit run --all-files</code></pre></div>\n<p>    새로운 hook을 추가했을 때, 기존의 존재하는 모든 파일을 검사할 필요가 있습니다. 이에 위와 같은 command를 실행시켜주면 검사를 진행하게 됩니다.</p>\n<p>    이제 위에서 배운 <code class=\"language-text\">black</code>, <code class=\"language-text\">flake8</code>, <code class=\"language-text\">isort</code>을 어떻게 <code class=\"language-text\">pre-commit-config.yaml</code>에 적용할 수 있는지 알아보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">repos<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span>   repo<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>psf<span class=\"token operator\">/</span>black\n    rev<span class=\"token punctuation\">:</span> <span class=\"token number\">20.</span><span class=\"token number\">8b1</span>\n    hooks<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> black\n<span class=\"token operator\">-</span>   repo<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>gitlab<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>pycqa<span class=\"token operator\">/</span>flake8\n    rev<span class=\"token punctuation\">:</span> <span class=\"token number\">3.8</span><span class=\"token number\">.4</span>\n    hooks<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> flake8\n<span class=\"token operator\">-</span>   repo<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>timothycrosley<span class=\"token operator\">/</span>isort\n    rev<span class=\"token punctuation\">:</span> <span class=\"token number\">5.7</span><span class=\"token number\">.0</span>\n    hooks<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span>   <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> isort</code></pre></div>\n<p>    위에 코드를 yaml파일에 추가시키면 됩니다. 만약 <code class=\"language-text\">black</code>과 <code class=\"language-text\">isort</code>에 <strong>argument를 넣고 싶다</strong>면 아래의 그림과 같이 <code class=\"language-text\">setup.cfg</code>에 추가시키면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># setup.cfg</span>\n<span class=\"token punctuation\">[</span>flake8<span class=\"token punctuation\">]</span>\nextend<span class=\"token operator\">-</span>ignore <span class=\"token operator\">=</span> E501<span class=\"token punctuation\">,</span> E402<span class=\"token punctuation\">,</span> E261\nexclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>git<span class=\"token punctuation\">,</span> __pycache__\ncount <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>    대부분의 project에서 아래와 같이 <code class=\"language-text\">setup.cfg</code>와 <code class=\"language-text\">.pre-commit-config.yaml</code>을 설정할 예정입니다:)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># setup.cfg</span>\n<span class=\"token punctuation\">[</span>flake8<span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">max</span><span class=\"token operator\">-</span>line<span class=\"token operator\">-</span>length <span class=\"token operator\">=</span> <span class=\"token number\">88</span>\nextend<span class=\"token operator\">-</span>ignore <span class=\"token operator\">=</span> E203<span class=\"token punctuation\">,</span> W503\n\n<span class=\"token punctuation\">[</span>isort<span class=\"token punctuation\">]</span>\nmulti_line_output <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\ninclude_trailing_comma <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nforce_grid_wrap <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nuse_parentheses <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nensure_newline_before_comments <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nline_length <span class=\"token operator\">=</span> <span class=\"token number\">88</span>\nknown_third_party <span class=\"token operator\">=</span> stepper\nprofile <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span>\n\n<span class=\"token comment\">## .pre-commit-config.yaml</span>\nrepos<span class=\"token punctuation\">:</span>\n  <span class=\"token operator\">-</span> repo<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>psf<span class=\"token operator\">/</span>black\n    rev<span class=\"token punctuation\">:</span> <span class=\"token number\">20.</span><span class=\"token number\">8b1</span>\n    hooks<span class=\"token punctuation\">:</span>\n      <span class=\"token operator\">-</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> black\n  <span class=\"token operator\">-</span> repo<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>gitlab<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>pycqa<span class=\"token operator\">/</span>flake8\n    rev<span class=\"token punctuation\">:</span> <span class=\"token number\">3.8</span><span class=\"token number\">.4</span>\n    hooks<span class=\"token punctuation\">:</span>\n      <span class=\"token operator\">-</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> flake8\n  <span class=\"token operator\">-</span> repo<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>PyCQA<span class=\"token operator\">/</span>isort\n    rev<span class=\"token punctuation\">:</span> <span class=\"token number\">5.7</span><span class=\"token number\">.0</span>\n    hooks<span class=\"token punctuation\">:</span>\n      <span class=\"token operator\">-</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> isort\n\t\t<span class=\"token comment\">#or args: [\"--profile\", \"black\"]</span></code></pre></div>\n<p>    위의 코드에서 <strong>rev는 tag(release)를 의미</strong>하며 <strong>버전</strong>을 뜻합니다. isort의 버전에 대한 정보는 <a href=\"https://github.com/PyCQA/isort/tags\">여기</a>있습니다.</p>\n<p>    <strong>pre-commit을 설치</strong>했다면 <strong>매 project마다</strong> <code class=\"language-text\">.pre-commit-config.yaml</code>을 만들어 설정해주고 <code class=\"language-text\">pre-commit install</code>을 사용하여 이것을 <strong>.git/hooks/pre-commit에 반영</strong>해주면 됩니다.</p>\n<h2 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<ol>\n<li><code class=\"language-text\">pre-commit</code> command(tool)는 <code class=\"language-text\">.pre-commit-config.yaml</code>에 <strong>저장되어 있는 특정 작업</strong>들을 .git/hooks/pre-commit에 <strong>간편하게 저장하기 위해 사용</strong>합니다. 즉, <strong>pre-commit hook을 간편하게 설정하기 위해 사용</strong>합니다.</li>\n<li>프로젝트 단위 당 관리를 할 때, <code class=\"language-text\">pre-commit</code> hook를 활용해도 flake8에 대한 argument를 넣기 위해선 <code class=\"language-text\">setup.cfg</code>를 사용하면 됩니다.</li>\n<li>flake8에 대해서 setup.cfg를 사용할 때, <code class=\"language-text\">W503</code>을 무시하도록 설정해야합니다. Black은 <strong>이항 연산자 전에 줄 바꿈을 추가</strong>시키는데 <code class=\"language-text\">flake8</code>은 이를 <strong>경고로 발생시키기 때문</strong>입니다.</li>\n<li>flake8과 isort가 충돌하는 것을 방지하기 위해 <code class=\"language-text\">args: [\"--profile\", \"black\"]</code>를 추가시켜야 합니다.</li>\n<li><strong>pre-commit을 설치</strong>했다면 <strong>매 project마다</strong> <code class=\"language-text\">.pre-commit-config.yaml</code>을 만들어 설정해주고 <code class=\"language-text\">pre-commit install</code>을 사용하여 이것을 <strong>.git/hooks/pre-commit에 반영</strong>해주면 됩니다.</li>\n</ol>\n<p>이것으로 오늘의 포스팅을 마무리하겠습니다.<br>\n다음에 봐요~😎</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ol>\n<li>Flake 8 documentation: <a href=\"https://flake8.pycqa.org/en/latest/user/options.html#cmdoption-flake8-config\">https://flake8.pycqa.org/en/latest/user/options.html#cmdoption-flake8-config</a></li>\n<li>Flake 8 description: <a href=\"https://tech.songyunseop.com/post/2017/05/lint-with-flake8/\">https://tech.songyunseop.com/post/2017/05/lint-with-flake8/</a></li>\n<li>isort: <a href=\"https://pypi.org/project/isort/\">https://pypi.org/project/isort/</a></li>\n<li>what is E203 error? <code class=\"language-text\">whitespace</code>: <a href=\"https://itholic.github.io/python-flake8-list/\">https://itholic.github.io/python-flake8-list/</a></li>\n<li>what is w503? <code class=\"language-text\">line break before binary operator</code>: <a href=\"https://jonnung.dev/python/2019/11/10/python-black-uncompromising-code-formatter/\">https://jonnung.dev/python/2019/11/10/python-black-uncompromising-code-formatter/</a></li>\n<li>Git Hook: <a href=\"https://techblog.woowahan.com/2530/\">https://techblog.woowahan.com/2530/</a></li>\n<li>Pre-commit is hook: <a href=\"https://egg-programmer.tistory.com/288\">https://egg-programmer.tistory.com/288</a></li>\n<li>Pre-commit 설치 방법 및 실행(<strong>pre-commit install이 중요→ .</strong>git/hook에 pre-commit 생성 후 pre-commit-config.yaml을 보고 특정 작업 저장): <a href=\"https://www.daleseo.com/pre-commit/\">https://www.daleseo.com/pre-commit/</a></li>\n<li>linux ’>’ 의미: <a href=\"https://twpower.github.io/114-difference-between-single-and-double-greater-than-sign\">https://twpower.github.io/114-difference-between-single-and-double-greater-than-sign</a></li>\n<li>Pre-commit documentation: <a href=\"https://pre-commit.com/#plugins\">https://pre-commit.com/#plugins</a></li>\n<li>Introduce 4 pre-commit plugins(black, flake8, isort, interrogate): <a href=\"https://towardsdatascience.com/4-pre-commit-plugins-to-automate-code-reviewing-and-formatting-in-python-c80c6d2e9f5\">https://towardsdatascience.com/4-pre-commit-plugins-to-automate-code-reviewing-and-formatting-in-python-c80c6d2e9f5</a></li>\n<li>black 소개: <a href=\"https://www.daleseo.com/python-black/\">https://www.daleseo.com/python-black/</a></li>\n<li>black 코드 스타일 소개: <a href=\"https://jonnung.dev/python/2019/11/10/python-black-uncompromising-code-formatter/\">https://jonnung.dev/python/2019/11/10/python-black-uncompromising-code-formatter/</a></li>\n<li>isort documentation: <a href=\"https://pythonrepo.com/repo/PyCQA-isort-python-general-utilities\">https://pythonrepo.com/repo/PyCQA-isort-python-general-utilities</a></li>\n<li>isort와 black 충돌 해결방법: <a href=\"https://bleepcoder.com/ko/isort/713521288/how-to-make-isort-black-compatible-original-question-isort\">https://bleepcoder.com/ko/isort/713521288/how-to-make-isort-black-compatible-original-question-isort</a></li>\n</ol>","frontmatter":{"title":"Python Coding Convention Library","date":"September 05, 2021"}}},"pageContext":{"slug":"/Python/python-coding-convention-library/","previous":{"fields":{"slug":"/AI/learning-rate-decay/"},"frontmatter":{"title":"Learning Rate Decay"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}